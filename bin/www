#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require('http');
const { Server } = require('socket.io');
const debug = require('debug')('tryal:server');
const config = require('../../config');
const getDb = require('../bin/db');
const attachSocketEvents = require('../sockets');

(async () => {
    try {
        const db = await getDb('resqzone_db');
        const createApp = require('../app');

        const port = normalizePort(
            process.env.PORT || config.domains.resqzone_api.port
        );

        const server = http.createServer(); // temp create without app

        // Setup Socket.IO
        const io = new Server(server, {
            cors: {
                origin: '*',
                methods: ['GET', 'POST'],
            },
        });

        const app = createApp(db, io); // ✅ pass io here
        app.set('port', port);
        app.set('io', io); // optional double set for access in middleware

        server.on('request', app); // attach app to server

        attachSocketEvents(io);

        server.listen(port, '0.0.0.0', () => {
            console.log(`🚀 Server running on http://localhost:${port}`);
            console.log(`🌍 Domain: ${config.domains.resqzone_api.domain}`);
        });

        server.on('error', onError);
        server.on('listening', onListening);

        function normalizePort(val) {
            const port = parseInt(val, 10);
            if (isNaN(port)) return val;
            if (port >= 0) return port;
            return false;
        }

        function onError(error) {
            if (error.syscall !== 'listen') throw error;
            const bind =
                typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
            switch (error.code) {
                case 'EACCES':
                    console.error(bind + ' requires elevated privileges');
                    process.exit(1);
                case 'EADDRINUSE':
                    console.error(bind + ' is already in use');
                    process.exit(1);
                default:
                    throw error;
            }
        }

        function onListening() {
            const addr = server.address();
            const bind =
                typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
            debug('Listening on ' + bind);
        }
    } catch (err) {
        console.error('🚨 Failed to start server:', err);
        process.exit(1);
    }
})();
